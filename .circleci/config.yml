version: 2
jobs:
  build:
    docker:
      - image: littlekidogo/alpine-elixir-phoenix
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - restore_cache:  # restores saved mix cache
          keys:  # list of cache keys, in decreasing specificity
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:  # restores saved build cache
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run:
          name: Get Dependecies
          command: mix deps.get
      - run:
          name: Compile
          command: mix compile
      - save_cache:  # generate and store cache so `restore_cache` works
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:  # make another less specific cache
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:  # you should really save one more cache just in case
          key: v1-mix-cache
          paths: "deps"
      - save_cache: # don't forget to save a *build* cache, too
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache: # and one more build cache for good measure
          key: v1-build-cache
          paths: "_build"
      - persist_to_workspace:
          root: /opt/app
          paths:
            - project
  test:
    docker:
      - image: littlekidogo/phoenix-deploy
        environment:
          MIX_ENV: test
      - image: postgres:latest
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

    steps:
      - attach_workspace:
          at: /opt/app

      - run:
          name: Install dockerize
          command: |
           wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-alpine-linux-amd64-v0.6.1.tar.gz \
           && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-v0.6.1.tar.gz \
           && rm dockerize-alpine-linux-amd64-v0.6.1.tar.gz

      - run:  # special utility that stalls main process until DB is ready
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Run Tests
          command: |
            if [ ${CIRCLE_PR_USERNAME} ]; then
              MIX_ENV=test mix test;
            else
              MIX_ENV=test mix coveralls.circle;
            fi

workflows:
  version: 2
  build-test:
    jobs:
      - build
      - test:
          requires:
            - build
